.form {
  text-align: right;
  width: 100%;
}

.form button {
  font: inherit;
  cursor: pointer;
  background-color: #8a2b06;
  border: 1px solid #8a2b06;
  color: white;
  padding: 0.25rem 2rem;
  border-radius: 20px;
  font-weight: bold;
}

.form button:hover,
.form button:active {
  background-color: #641e03;
  border-color: #641e03;
}

.form .buttonContainer {
  width: 100%; /* Ocupa todo el ancho */
  display: flex;
  justify-content: center; /* Centra el botón horizontalmente */
}

.form .stockDisplay {
  font-size: 1rem; /* Ajusta el tamaño de la fuente */
  color: #333; /* Color del texto, cámbialo según tu diseño */
  margin: 0.5rem 0; /* Ajusta el margen según necesites */
  text-align: left; /* Alineación del texto */
  display: flex; /* Usa flexbox para alinear los elementos horizontalmente */
  align-items: center; /* Centra los elementos verticalmente */
}

.form .stockText {
  margin-right: 0.5rem; /* Espaciado entre el texto y el número */
}

.form .stockAmount {
  font-weight: bold; /* Si quieres que el número sea más destacado */
}

.form button:disabled {
  background-color: #ccc; /* Color de fondo para el botón deshabilitado */
  color: #666; /* Color del texto para el botón deshabilitado */
  cursor: not-allowed; /* Cambiar el cursor para indicar que no se puede presionar */
  border-color: #ccc;
}

.productItemError {
  text-align: center;
  color: red;
  font-size: 15px;
}

/*

Como se combino el .form de aca con el .products de product items:

.form:
text-align: right;: Alinea el texto a la derecha dentro del formulario, lo que probablemente afecte a los mensajes de error o cualquier texto dentro del formulario que no sea un elemento de formulario como input o button.
width: 100%;: Hace que el formulario ocupe el 100% del ancho de su contenedor. Esto es útil para asegurarse de que el formulario se estire para ocupar el espacio asignado por los estilos del li.

.product:
display: flex;: Establece un contenedor flexible para los elementos internos.
justify-content: space-between;: Separa los dos div hijos, empujándolos hacia los extremos opuestos del contenedor .product.
margin: 1rem;: Añade espacio alrededor del contenedor.
padding-bottom: 1rem;: Añade espacio en la parte inferior dentro del contenedor.
border-bottom: 1px solid #ccc;: Añade una línea divisoria debajo del contenedor para separarlo visualmente de otros elementos.

.product > div:first-child:
flex: 1;: Permite que el primer div crezca para ocupar cualquier espacio disponible, dándole la flexibilidad de ajustarse según el ancho del contenedor padre.

.product > div:last-child:
flex: 0 1 180px;: Establece que el segundo div no crecerá más allá de su contenido, pero puede encogerse hasta un mínimo de 180px.
display: flex;: Aplica Flexbox a los elementos dentro de este div.
flex-direction: column;: Alinea los elementos hijos en una columna vertical.
justify-content: flex-start;: Alinea los elementos hijos al inicio del contenedor en el eje vertical.
align-items: center;: Centra los elementos hijos en el eje horizontal dentro de su contenedor.



La propiedad flex en CSS es una abreviatura que combina flex-grow, flex-shrink, y flex-basis. La declaración flex: 0 1 300px; establece cómo un elemento flexible (un elemento con display: flex aplicado a su contenedor) crecerá y se encogerá en relación con otros elementos flexibles dentro del mismo contenedor. Veamos cada parte de esa declaración:

flex-grow: 0; — Este valor indica que el elemento no crecerá para llenar el espacio adicional en el contenedor. Es decir, si hay espacio adicional en el contenedor más allá del tamaño natural de todos los elementos, este elemento particular no se expandirá para ocupar ese espacio.

flex-shrink: 1; — Este valor permite que el elemento se encoja si es necesario. Si los elementos no caben en una línea y el contenedor no puede expandirse más, este elemento se encogerá. Un valor de 1 significa que el elemento puede encogerse, pero lo hará en proporción a otros elementos flexibles que también pueden encogerse.

flex-basis: 300px; — Este valor establece el tamaño inicial del elemento antes de que la distribución del espacio restante (según flex-grow) o el encogimiento (según flex-shrink) tenga lugar. En este caso, 300px actúa como un punto de partida para el cálculo del tamaño final del elemento. Se puede interpretar como el "tamaño ideal" o "tamaño base" del elemento.

Por lo tanto, cuando se aplica flex: 0 1 300px; a un elemento, estás diciendo que el elemento debería comenzar con un tamaño de 300px, no debería crecer más allá de ese tamaño (debido a flex-grow: 0;), pero podría encogerse si hay demasiado contenido para el contenedor y es necesario (debido a flex-shrink: 1;). El min-width es independiente y asegura que el elemento no se encogerá por debajo de ese tamaño mínimo, incluso si flex-shrink está activado.




*/
